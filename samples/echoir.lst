 AS V1.42 Beta [Bld 150] - Source File echoir.asm - Page 1 - 11/29/2019 12:25:08 AM


          0 :                     	listing on
          0 :                             page    0
          0 :                     	cpu	6809
          0 :                     
          0 :                             include "compat6800.inc"
(1)       0 :                     ;;; -*- mode: asm; mode: flying-spell; -*-
(1)       0 :                     ;;; MC6800 compatible mcaros
(1)       0 :                             listing on
(1)       0 :                     
          0 :                     
          0 :                     ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =$FFC0              ACIA:   equ	$FFC0
          0 :                             include "mc6850.inc"
(1)       0 :                     ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                     
(1)       0 :                     ;;; MC6850
(1)       0 :                     ;;; Asynchronous Communication Interface Adapter
(1)       0 :                     
(1)       0 :                     ;;; Control register
(1)       0 : =$FFC0              ACIA_control:   equ	ACIA+0
(1)       0 :                     	;; Counter Divider Select Bits
(1)       0 : =$3                 CDS_gm:         equ     $03    ; Group mask
(1)       0 : =$0                 CDS_DIV1_gc:	equ	$00    ; /1
(1)       0 : =$1                 CDS_DIV16_gc:	equ	$01    ; /16
(1)       0 : =$2                 CDS_DIV64_gc:	equ	$02    ; /64
(1)       0 : =$3                 CDS_RESET_gc:	equ	$03    ; Master Reset
(1)       0 :                     	;; Word Select Bits
(1)       0 : =$1C                WSB_gm:         equ     $1c    ; Group mask
(1)       0 : =$0                 WSB_7E2_gc:	equ	$00    ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =$4                 WSB_7O2_gc:	equ	$04    ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =$8                 WSB_7E1_gc:	equ	$08    ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =$C                 WSB_7O1_gc:	equ	$0C    ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =$10                WSB_8N2_gc:	equ	$10    ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =$14                WSB_8N1_gc:	equ	$14    ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =$18                WSB_8E1_gc:	equ	$18    ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =$1C                WSB_8O1_gc:	equ	$1C    ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                     	;; Transmit Control Bits
(1)       0 : =$60                TCB_gm:         equ    $60    ; Group mask
(1)       0 : =$0                 TCB_DI_gc:	equ	$00    ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =$20                TCB_EI_gc:	equ	$20    ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =$40                TCB_RTS_gc:	equ	$40    ; RTS=High, Tx Interrupt Disabled
(1)       0 : =$60                TCB_BREAK_gc:	equ	$60    ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                     				; Transmit Break Level
(1)       0 : =$80                RIEB_bm:	equ	$80    ; Receive Interrupt Enable Bit mask
(1)       0 :                     
(1)       0 :                     ;;; Status register
(1)       0 : =$FFC0              ACIA_status:    equ	ACIA+0
(1)       0 : =$1                 RDRF_bm:	equ	$01		; Receive Data Register Full
(1)       0 : =$2                 TDRE_bm:	equ	$02		; Transmit Data Register Empty
(1)       0 : =$4                 DCDF_bm:	equ	$04		; Data Carrier Detect Flag
(1)       0 : =$8                 CTSF_bm:	equ	$08		; Clear To Send Flag
(1)       0 : =$10                FERR_bm:	equ	$10		; Frame Error Flag
(1)       0 : =$20                OVRN_bm:	equ	$20		; Receiver Overrun Flag
(1)       0 : =$40                PERR_bm:	equ	$40		; Parity Error Flag
(1)       0 : =$80                IRQF_bm:	equ	$80		; Interrupt Request Flag
(1)       0 :                     
(1)       0 :                     ;;; Data register
(1)       0 : =$FFC1              ACIA_data:      equ	ACIA+1		; Data register
(1)       0 :                     
          0 :                     
       2000 :                     	org	$2000
       2000 :                     
       2000 : =$80                rx_queue_size:	equ	128
       2000 :                     rx_queue:	rmb	rx_queue_size
       2080 : =$94                RX_INT_TX_NO:	equ    WSB_8N1_gc|RIEB_bm
       2080 :                     
       F000 :                     	org	$F000
       F000 : =$F000              stack:	equ	*
       F000 :                     
       1000 :                     	org	$1000
       1000 :                     initialize:
       1000 : 10 CE F0 00         	lds	#stack
       1004 : 8E 20 00            	ldx	#rx_queue
       1007 : C6 80               	ldb	#rx_queue_size
       1009 : 17 00 2A            	lbsr	queue_init
       100C :                     	;; initialize ACIA
       100C : 86 03               	lda	#CDS_RESET_gc   ; Master reset
       100E : B7 FF C0            	sta	ACIA_control
       1011 : 86 94               	lda	#RX_INT_TX_NO
       1013 : B7 FF C0            	sta	ACIA_control
       1016 : (MACRO)             	cli			; Clear IRQ mask
       1016 : 1C EF                       andcc   #~$10
       1018 :                     
       1018 : 8E 20 00            	ldx	#rx_queue
       101B :                     receive_loop:
       101B : (MACRO)             	sei			; Set IRQ mask
       101B : 1A 10                       orcc    #$10
       101D : 17 00 4A            	lbsr	queue_remove
       1020 : (MACRO)             	cli			; Clear IRQ mask
       1020 : 1C EF                       andcc   #~$10
       1022 : 24 F7               	bcc	receive_loop
       1024 :                     transmit_loop:
       1024 : F6 FF C0            	ldb	ACIA_status
       1027 : C5 02               	bitb	#TDRE_bm
       1029 : 27 F9               	beq	transmit_loop
       102B :                     transmit_data:
       102B : B7 FF C1            	sta	ACIA_data
       102E : 81 0D                       cmpa    #$0d
       1030 : 26 E9                       bne     receive_loop
       1032 : 86 0A                       lda     #$0a
       1034 : 20 EE               	bra	transmit_loop
       1036 :                     
       1036 :                             include "queue.inc"
(1)    1036 :                     ;;; -*- mode: asm; mode: flying-spell; -*-
(1)    1036 :                     
(1)    1036 :                     ;;; [queue] queue structure
(1)    1036 : =$0                 queue_len:	equ	0	; queue length
(1)    1036 : =$1                 queue_size:	equ	1	; buffer size
(1)    1036 : =$2                 queue_put:	equ	2	; queue put index
(1)    1036 : =$3                 queue_get:	equ	3	; queue get index
(1)    1036 : =$4                 queue_buf:	equ	4	; buffer start offset
(1)    1036 :                     
(1)    1036 :                     ;;; [queue] Initialize queue
(1)    1036 :                     ;;; @param X queue work space pointer
(1)    1036 :                     ;;; @param B queue work space size
(1)    1036 :                     ;;; @clobber B
(1)    1036 :                     queue_init:
(1)    1036 : 34 16               	pshs	x,d
(1)    1038 :                     .clear_loop:
(1)    1038 : 6F 80               	clr	,x+
(1)    103A : 83 00 01            	subd	#1
(1)    103D : 26 F9               	bne	.clear_loop
(1)    103F : 35 16               	puls	d,x
(1)    1041 : C0 04               	subb	#queue_buf
(1)    1043 : E7 01               	stb	queue_size,x
(1)    1045 : 39                  	rts
(1)    1046 :                     
(1)    1046 :                     ;;; [queue] Add an element to queue
(1)    1046 :                     ;;; @param X queue work space pointer
(1)    1046 :                     ;;; @param A an element
(1)    1046 :                     ;;; @return CC.C 0 if queue is full
(1)    1046 :                     queue_add:
(1)    1046 : 34 46               	pshs	u,b,a
(1)    1048 : E6 84               	ldb	queue_len,x
(1)    104A : E1 01               	cmpb	queue_size,x
(1)    104C : 25 02               	blo	.add_elem
(1)    104E : 35 C6               	puls	a,b,u,pc        ; carry is cleared
(1)    1050 :                     .add_elem:
(1)    1050 : 4F                  	clra
(1)    1051 : E6 02               	ldb	queue_put,x	; 16 bits offset
(1)    1053 : 33 04               	leau	queue_buf,x
(1)    1055 : 33 CB               	leau	d,u
(1)    1057 : A6 E4               	lda	,s		; an element
(1)    1059 : A7 C4               	sta	,u
(1)    105B : 6C 84               	inc	queue_len,x
(1)    105D : 5C                  	incb
(1)    105E : E7 02               	stb	queue_put,x
(1)    1060 : E1 01               	cmpb	queue_size,x
(1)    1062 : 25 04               	blo	.return         ; carry is set
(1)    1064 : 6F 02               	clr	queue_put,x
(1)    1066 : 1A 01               	orcc	#1		; set carry
(1)    1068 :                     .return:
(1)    1068 : 35 C6               	puls	a,b,u,pc
(1)    106A :                     
(1)    106A :                     ;;; [queue] Remove an element from queue
(1)    106A :                     ;;; @param X queue work space pointer
(1)    106A :                     ;;; @return A an element
(1)    106A :                     ;;; @return CC.C 0 if queue is empty
(1)    106A :                     queue_remove:
(1)    106A : 6D 84               	tst	queue_len,x
(1)    106C : 26 03               	bne	.remove_elem
(1)    106E : 1C FE               	andcc	#~1		; clear carry
(1)    1070 : 39                  	rts
(1)    1071 :                     .remove_elem: 
(1)    1071 : 34 44               	pshs	u,b
(1)    1073 : 4F                  	clra
(1)    1074 : E6 03               	ldb	queue_get,x	; 16 bits offset
(1)    1076 : 33 04               	leau	queue_buf,x
(1)    1078 : A6 CB               	lda	d,u
(1)    107A : 6A 84               	dec	queue_len,x
(1)    107C : 5C                  	incb
(1)    107D : E7 03               	stb	queue_get,x
(1)    107F : E1 01               	cmpb	queue_size,x
(1)    1081 : 25 04               	blo	.return         ; carry is set
(1)    1083 : 6F 03               	clr	queue_get,x
(1)    1085 : 1A 01               	orcc	#1		; set carry
(1)    1087 :                     .return:
(1)    1087 : 35 C4                       puls	b,u,pc
(1)    1089 :                             
(1)    1089 :                     
       1089 :                     
       1089 :                     isr_irq:
       1089 : F6 FF C0            	ldb	ACIA_status
       108C : C5 80               	bitb	#IRQF_bm
       108E : 27 0D               	beq	isr_irq_return
       1090 :                     isr_irq_receive:
       1090 : C5 01               	bitb	#RDRF_bm
       1092 : 27 09               	beq	isr_irq_recv_end
       1094 : B6 FF C1            	lda	ACIA_data
       1097 : 8E 20 00            	ldx	#rx_queue
       109A : 17 FF A9            	lbsr	queue_add
       109D :                     isr_irq_recv_end:
       109D :                     isr_irq_return:
       109D : 3B                  	rti
       109E :                     
       FFF8 :                     	org	$FFF8
       FFF8 : 10 89               	fdb	isr_irq
       FFFA :                     
       FFFE :                     	org	$FFFE
       FFFE : 10 00               	fdb	initialize
      10000 :                     
 AS V1.42 Beta [Bld 150] - Source File echoir.asm - Page 2 - 11/29/2019 12:25:08 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.01 seconds assembly time

    383 lines source file
    386 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
